// <auto-generated />
using System;
using AQC.Manifestly.Core.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AQC.Manifestly.Core.Domain.Data.Migrations
{
    [DbContext(typeof(AQCManifestlyDbContext))]
    partial class AQCManifestlyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department", "AQC.Manifestly");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Run", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ArchiveUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LateAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("PercentCompleted")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Run", "AQC.Manifestly");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.RunStep", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RunId")
                        .HasColumnType("int");

                    b.Property<bool>("Skipped")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.HasIndex("UserId");

                    b.ToTable("RunStep", "AQC.Manifestly");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.RunStepComment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CommentWithLinks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RunStepId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RunStepId");

                    b.ToTable("RunStepComment", "AQC.Manifestly");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimpleDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "AQC.Manifestly");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Workflow", "AQC.Manifestly");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Run", b =>
                {
                    b.HasOne("AQC.Manifestly.Core.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Runs")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.RunStep", b =>
                {
                    b.HasOne("AQC.Manifestly.Core.Domain.Entities.Run", "Run")
                        .WithMany("RunSteps")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AQC.Manifestly.Core.Domain.Entities.User", "User")
                        .WithMany("RunSteps")
                        .HasForeignKey("UserId");

                    b.Navigation("Run");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.RunStepComment", b =>
                {
                    b.HasOne("AQC.Manifestly.Core.Domain.Entities.RunStep", "RunStep")
                        .WithMany("Comments")
                        .HasForeignKey("RunStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RunStep");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Workflow", b =>
                {
                    b.HasOne("AQC.Manifestly.Core.Domain.Entities.Department", "Department")
                        .WithMany("Workflows")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Department", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Run", b =>
                {
                    b.Navigation("RunSteps");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.RunStep", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("RunSteps");
                });

            modelBuilder.Entity("AQC.Manifestly.Core.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Runs");
                });
#pragma warning restore 612, 618
        }
    }
}
